/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grama = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[2,25],$V2=[1,26],$V3=[1,27],$V4=[1,28],$V5=[1,19],$V6=[1,29],$V7=[1,30],$V8=[1,31],$V9=[1,32],$Va=[1,33],$Vb=[1,34],$Vc=[1,20],$Vd=[1,21],$Ve=[1,22],$Vf=[1,23],$Vg=[1,24],$Vh=[1,18],$Vi=[1,35],$Vj=[1,36],$Vk=[2,5,8,20,25,26,27,29,30,31,32,33,34,35,36,41,42,43,44,45,61,62],$Vl=[1,54],$Vm=[1,68],$Vn=[1,64],$Vo=[1,69],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[30,31,32,33,34,35,56,63,64],$Vw=[8,38],$Vx=[1,98],$Vy=[1,97],$Vz=[1,84],$VA=[1,85],$VB=[1,86],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[1,91],$VH=[1,92],$VI=[1,93],$VJ=[1,94],$VK=[1,95],$VL=[1,96],$VM=[1,99],$VN=[1,100],$VO=[8,22,24,30,31,32,33,34,35,38,66,67,68,69,75,76,77,78,79,80,81,82,83,84,85],$VP=[8,22,24,30,31,32,33,34,35,38,69,75,76,77,78,79,80,81,82,83,84,85],$VQ=[8,22,24,30,31,32,33,34,35,38,66,67,69,75,76,77,78,79,80,81,82,83,84,85],$VR=[8,30,31,32,33,34,35,38,69,75,76,77,78,79,80,81,82],$VS=[8,30,31,32,33,34,35,38,75,76,81,82],$VT=[8,30,31,32,33,34,35,38,75,76,77,78,79,80,81,82],$VU=[1,147],$VV=[2,46],$VW=[1,146];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"tk_PuntoYComa":8,"IMPRIMIR":9,"ASIGNACION":10,"IF":11,"WHILE":12,"FOR":13,"DO":14,"COMENTARIO":15,"CLASE":16,"METODO":17,"LLAMAMETODO":18,"SENT":19,"tk_LlaveC":20,"DECLA":21,"tk_igual":22,"EXPRESION":23,"tk_coma":24,"tk_break":25,"tk_continue":26,"tk_return":27,"TIPO":28,"tk_identificador":29,"tk_int":30,"tk_double":31,"tk_boolean":32,"tk_char":33,"tk_string":34,"tk_void":35,"tk_if":36,"tk_ParentesisA":37,"tk_ParentesisC":38,"SENTENCIAS":39,"tk_else":40,"tk_while":41,"tk_for":42,"tk_do":43,"Tk_comentario":44,"tk_system":45,"tk_Punto":46,"tk_out":47,"IMPRIMIRPRIMA":48,"CONTENIDO":49,"tk_print":50,"tk_println":51,"CONTENIDOVARIO":52,"tk_cadena":53,"ACCESO":54,"CLAIN":55,"tk_static":56,"tk_main":57,"tk_CorcheteA":58,"tk_CorcheteC":59,"tk_args":60,"tk_public":61,"tk_private":62,"tk_class":63,"tk_interface":64,"tk_LlaveA":65,"tk_diagonal":66,"tk_multiplicacion":67,"tk_menos":68,"tk_mas":69,"tk_entero":70,"tk_decimal":71,"tk_float":72,"tk_false":73,"tk_true":74,"tk_dobleIgual":75,"tk_diferenteDe":76,"tk_menorQue":77,"tk_mayorQue":78,"tk_menorOigual":79,"tk_mayorOigual":80,"tk_And":81,"tk_Or":82,"tk_Potencia":83,"tk_sustraccion":84,"tk_adicion":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"tk_PuntoYComa",20:"tk_LlaveC",22:"tk_igual",24:"tk_coma",25:"tk_break",26:"tk_continue",27:"tk_return",29:"tk_identificador",30:"tk_int",31:"tk_double",32:"tk_boolean",33:"tk_char",34:"tk_string",35:"tk_void",36:"tk_if",37:"tk_ParentesisA",38:"tk_ParentesisC",40:"tk_else",41:"tk_while",42:"tk_for",43:"tk_do",44:"Tk_comentario",45:"tk_system",46:"tk_Punto",47:"tk_out",50:"tk_print",51:"tk_println",53:"tk_cadena",56:"tk_static",57:"tk_main",58:"tk_CorcheteA",59:"tk_CorcheteC",60:"tk_args",61:"tk_public",62:"tk_private",63:"tk_class",64:"tk_interface",65:"tk_LlaveA",66:"tk_diagonal",67:"tk_multiplicacion",68:"tk_menos",69:"tk_mas",70:"tk_entero",71:"tk_decimal",72:"tk_float",73:"tk_false",74:"tk_true",75:"tk_dobleIgual",76:"tk_diferenteDe",77:"tk_menorQue",78:"tk_mayorQue",79:"tk_menorOigual",80:"tk_mayorOigual",81:"tk_And",82:"tk_Or",83:"tk_Potencia",84:"tk_sustraccion",85:"tk_adicion"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[21,2],[21,3],[21,0],[19,1],[19,1],[19,2],[7,3],[7,0],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[10,3],[11,5],[11,7],[12,5],[13,9],[14,3],[15,1],[9,6],[48,1],[48,1],[18,4],[49,3],[52,2],[52,2],[52,0],[16,4],[16,11],[54,1],[54,1],[55,1],[55,1],[17,7],[39,3],[23,3],[23,3],[23,3],[23,3],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,2],[23,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
this.$= `${$$[$0-1]} ${$$[$0]}`;
break;
case 3:
 this.$= `${$$[$0]}`;
break;
case 4: case 5: case 6: case 10: case 15:
 this.$ = `${$$[$0-1]};\n`;
break;
case 7: case 8: case 9: case 11: case 12:
 this.$ = `${$$[$0]}\n`; 
break;
case 13:
this.$= `${$$[$0]}\n`; 
break;
case 14:
 this.$ = `${$$[$0]};\n`; 
break;
case 16: case 17:
console.log('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
break;
case 18:
this.$ = `= ${$$[$0]} `;
break;
case 19:
this.$ = `, ${$$[$0-1]} ${$$[$0]}`;
break;
case 20: case 25: case 46:
this.$ = ``;
break;
case 21:
 this.$ = 'break'; 
break;
case 22:
 this.$ = 'continue';
break;
case 23:
this.$= `return ${$$[$0]}`;
break;
case 24:
this.$ = `${$$[$0-2]} ${$$[$0-1]}  ${$$[$0]}`;
break;
case 26: case 27: case 28: case 29: case 30:
 this.$ = 'var';
break;
case 32:
this.$ = ` ${$$[$0-2]} = ${$$[$0]} `;
break;
case 33:
this.$ = `if (  ${$$[$0-2]} ) ${$$[$0]}`;
break;
case 34:
this.$ = `if (  ${$$[$0-4]} )  ${$$[$0-2]} else  ${$$[$0-1]}`;
break;
case 35:
this.$ = `while ( ${$$[$0-2]} ) ${$$[$0]}`;
break;
case 36:
this.$ = `for (  ${$$[$0-6]} ; ${$$[$0-4]} ; ${$$[$0-2]} ) ${$$[$0]} `;
break;
case 37:
this.$ = `do ${$$[$0-1]} ${$$[$0]}`;
break;
case 38:
this.$ = `${$$[$0]}\n`;
break;
case 39:
this.$ = `console.log ${$$[$0]}`;
break;
case 42:
this.$ = ` var llamada=  new ${$$[$0-3]} ( ${$$[$0-1]}  )`;
break;
case 43:
this.$ = `( ${$$[$0-1]} )`;
break;
case 44: case 45:
 this.$ = `${$$[$0-1]}`; 
break;
case 47:
 this.$ = `function ${$$[$0-1]} ${$$[$0]}`;
break;
case 48:
 this.$ = ` function Main() ${$$[$0]}`;
break;
case 51: case 52:
 this.$= ` ${$$[$0]}`;
break;
case 53:
 this.$ = ` functionXXXX ${$$[$0-4]} ( ${$$[$0-2]} ) ${$$[$0]} `;
break;
case 54:
this.$ = `{\n ${$$[$0-1]} }\n`;
break;
case 55:
this.$ = ` ${$$[$0-2]} / ${$$[$0]}`;
break;
case 56:
this.$ = ` ${$$[$0-2]} * ${$$[$0]}`;
break;
case 57:
this.$ = ` ${$$[$0-2]} - ${$$[$0]}`;
break;
case 58:
this.$ = ` ${$$[$0-2]} + ${$$[$0]}`;
break;
case 59: case 60: case 61: case 62: case 63: case 64: case 65:
 this.$ = `${$$[$0]}`; 
break;
case 66:
this.$ = `,${$$[$0]}`;
break;
case 67:
this.$ = ` ${$$[$0-2]} == ${$$[$0]}`;
break;
case 68:
this.$ = ` ${$$[$0-2]} != ${$$[$0]}`;
break;
case 69:
this.$ = ` ${$$[$0-2]} < ${$$[$0]}`;
break;
case 70:
this.$ = ` ${$$[$0-2]} > ${$$[$0]}`;
break;
case 71:
this.$ = ` ${$$[$0-2]} <= ${$$[$0]}`;
break;
case 72:
this.$ = ` ${$$[$0-2]} >= ${$$[$0]}`;
break;
case 73:
this.$ = ` ${$$[$0-2]} && ${$$[$0]}`;
break;
case 74:
this.$ = ` ${$$[$0-2]} || ${$$[$0]}`;
break;
case 75:
this.$ = ` ${$$[$0-2]} ^ ${$$[$0]}`;
break;
case 76:
this.$ = ` ${$$[$0-2]} , ${$$[$0]}`;
break;
case 77:
this.$ = ` ${$$[$0-2]} = ${$$[$0]}`;
break;
case 78:
this.$ = ` ${$$[$0-1]} -- `;
break;
case 79:
this.$ = ` ${$$[$0-1]} ++ `;
break;
case 80:
this.$ = `(${$$[$0-1]} ) `;
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:$V1,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,25:$V2,26:$V3,27:$V4,28:17,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,54:25,61:$Vi,62:$Vj},{1:[3]},{2:$V0,5:[1,37],6:38,7:4,8:$V1,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,25:$V2,26:$V3,27:$V4,28:17,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,54:25,61:$Vi,62:$Vj},o($Vk,[2,3]),{8:[1,39]},{8:[1,40]},{8:[1,41]},o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,9]),{8:[1,42]},o($Vk,[2,11]),o($Vk,[2,12]),o($Vk,[2,13]),o($Vk,[2,14]),{8:[1,43]},{8:[1,45],20:[1,44]},{29:[1,46]},{46:[1,47]},{22:[1,48],37:[1,49]},{37:[1,50]},{37:[1,51]},{37:[1,52]},{39:53,65:$Vl},o($Vk,[2,38]),{28:57,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,55:55,56:[1,56],63:[1,58],64:[1,59]},{8:[2,21]},{8:[2,22]},{23:60,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{29:[2,26]},{29:[2,27]},{29:[2,28]},{29:[2,29]},{29:[2,30]},{29:[2,31]},o($Vv,[2,49]),o($Vv,[2,50]),{1:[2,1]},o($Vk,[2,2]),o($Vk,[2,4]),o($Vk,[2,5]),o($Vk,[2,6]),o($Vk,[2,10]),o($Vk,[2,15]),o($Vk,[2,16]),o($Vk,[2,17]),o($Vw,[2,20],{21:70,22:[1,71],24:[1,72]}),{47:[1,73]},{23:74,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{23:75,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{23:76,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{23:77,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{7:78,8:$V1,28:17,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb},{12:79,41:$Vd},{2:$V0,4:80,6:3,7:4,8:$V1,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,25:$V2,26:$V3,27:$V4,28:17,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,54:25,61:$Vi,62:$Vj},{29:[1,81]},{35:[1,82]},{29:[1,83]},{29:[2,51]},{29:[2,52]},{8:[2,23],22:$Vx,24:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN},o($VO,[2,59]),o($VO,[2,60]),o($VO,[2,61]),o($VO,[2,62]),o($VO,[2,63]),o($VO,[2,64]),o($VO,[2,65]),{23:101,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{23:102,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},o($Vw,[2,24]),{23:103,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{23:104,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{46:[1,105]},{8:[2,32],22:$Vx,24:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN},{22:$Vx,24:$Vy,38:[1,106],66:$Vz,67:$VA,68:$VB,69:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN},{22:$Vx,24:$Vy,38:[1,107],66:$Vz,67:$VA,68:$VB,69:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN},{22:$Vx,24:$Vy,38:[1,108],66:$Vz,67:$VA,68:$VB,69:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN},{8:[1,109]},{8:[2,37]},{2:$V0,6:38,7:4,8:$V1,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:[1,110],25:$V2,26:$V3,27:$V4,28:17,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,36:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,54:25,61:$Vi,62:$Vj},{39:111,65:$Vl},{57:[1,112]},{37:[1,113]},{23:114,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{23:115,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{23:116,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{23:117,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{23:118,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{23:119,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{23:120,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{23:121,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{23:122,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{23:123,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{23:124,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{23:125,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{23:126,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{23:127,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{23:128,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},o($VO,[2,78]),o($VO,[2,79]),o($VP,[2,66],{66:$Vz,67:$VA,68:$VB}),{22:$Vx,24:$Vy,38:[1,129],66:$Vz,67:$VA,68:$VB,69:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN},o($Vw,[2,18],{22:$Vx,24:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN}),o($Vw,$V1,{28:17,7:130,22:$Vx,24:$Vy,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,66:$Vz,67:$VA,68:$VB,69:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN}),{48:131,50:[1,132],51:[1,133]},o($Vk,[2,42]),{39:134,65:$Vl},{39:135,65:$Vl},{23:136,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},o([2,5,8,20,25,26,27,29,30,31,32,33,34,35,36,40,41,42,43,44,45,61,62],[2,54]),o($Vk,[2,47]),{37:[1,137]},{7:138,28:17,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,38:$V1},o($VQ,[2,55],{68:$VB}),o($VQ,[2,56],{68:$VB}),o($VQ,[2,57],{68:$VB}),o($VR,[2,58],{22:$Vx,24:$Vy,66:$Vz,67:$VA,68:$VB,83:$VL,84:$VM,85:$VN}),o($VS,[2,67],{22:$Vx,24:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,77:$VF,78:$VG,79:$VH,80:$VI,83:$VL,84:$VM,85:$VN}),o($VS,[2,68],{22:$Vx,24:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,77:$VF,78:$VG,79:$VH,80:$VI,83:$VL,84:$VM,85:$VN}),o($VT,[2,69],{22:$Vx,24:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,83:$VL,84:$VM,85:$VN}),o($VT,[2,70],{22:$Vx,24:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,83:$VL,84:$VM,85:$VN}),o($VT,[2,71],{22:$Vx,24:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,83:$VL,84:$VM,85:$VN}),o($VT,[2,72],{22:$Vx,24:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,83:$VL,84:$VM,85:$VN}),o([8,30,31,32,33,34,35,38,81,82],[2,73],{22:$Vx,24:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,83:$VL,84:$VM,85:$VN}),o([8,30,31,32,33,34,35,38,82],[2,74],{22:$Vx,24:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,83:$VL,84:$VM,85:$VN}),o($VR,[2,75],{22:$Vx,24:$Vy,66:$Vz,67:$VA,68:$VB,83:$VL,84:$VM,85:$VN}),o($VP,[2,76],{66:$Vz,67:$VA,68:$VB}),o($VR,[2,77],{22:$Vx,24:$Vy,66:$Vz,67:$VA,68:$VB,83:$VL,84:$VM,85:$VN}),o($VO,[2,80]),o($Vw,[2,19]),{37:[1,140],49:139},{37:[2,40]},{37:[2,41]},o($Vk,[2,33],{40:[1,141]}),o($Vk,[2,35]),{8:[1,142],22:$Vx,24:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN},{34:[1,143]},{38:[1,144]},{8:[2,39]},{29:$VU,38:$VV,52:145,53:$VW},{39:148,65:$Vl},{23:149,24:$Vm,29:$Vn,37:$Vo,53:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu},{58:[1,150]},{39:151,65:$Vl},{38:[1,152]},{29:$VU,38:$VV,52:153,53:$VW},{29:$VU,38:$VV,52:154,53:$VW},o($Vk,[2,34]),{22:$Vx,24:$Vy,38:[1,155],66:$Vz,67:$VA,68:$VB,69:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN},{59:[1,156]},o($Vk,[2,53]),{8:[2,43]},{38:[2,44]},{38:[2,45]},{39:157,65:$Vl},{60:[1,158]},o($Vk,[2,36]),{38:[1,159]},{39:160,65:$Vl},o($Vk,[2,48])],
defaultActions: {26:[2,21],27:[2,22],29:[2,26],30:[2,27],31:[2,28],32:[2,29],33:[2,30],34:[2,31],37:[2,1],58:[2,51],59:[2,52],79:[2,37],132:[2,40],133:[2,41],139:[2,39],152:[2,43],153:[2,44],154:[2,45]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let Nodo=require('./nodo_arbol');
    let tbl_error="";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 44; 
break;
case 1:return 44; 
break;
case 2:return 85; 
break;
case 3:return 84; 
break;
case 4:return 69; 
break;
case 5:return 68; 
break;
case 6:return 67; 
break;
case 7:return 66; 
break;
case 8:return 'tk_dosPuntos'; 
break;
case 9:return 8; 
break;
case 10:return 46; 
break;
case 11:return 24; 
break;
case 12:return 80; 
break;
case 13:return 79; 
break;
case 14:return 75; 
break;
case 15:return 22; 
break;
case 16:return 76; 
break;
case 17:return 77; 
break;
case 18:return 78; 
break;
case 19:return 'tk_diagonalInvertida'; 
break;
case 20:return 83;
break;
case 21:return 81;
break;
case 22:return 82;
break;
case 23:return 'tk_not';
break;
case 24:  return 70;  
break;
case 25:  return 71; 
break;
case 26:  return 'tk_default'; 
break;
case 27:  return 56; 
break;
case 28:  return 25;   
break;
case 29:  return 26;   
break;
case 30:  return 27;   
break;
case 31:  return 57;   
break;
case 32:  return 60;   
break;
case 33:  return 61;  
break;
case 34:  return 62;   
break;
case 35: return 'tk_switch';    
break;
case 36:return 'tk_case';     
break;
case 37:  return 35;   
break;
case 38:  return 45;   
break;
case 39:  return 47;   
break;
case 40:  return 51;   
break;
case 41:  return 50;   
break;
case 42:  return 64;   
break;
case 43:  return 63;   
break;
case 44:  return 42;   
break;
case 45:  return 36;   
break;
case 46:  return 40;   
break;
case 47:  return 41;   
break;
case 48:  return 43;   
break;
case 49:return 31;
break;
case 50:  return 30;   
break;
case 51:  return 32;   
break;
case 52:  return 72;   
break;
case 53:  return 34;   
break;
case 54:  return 33;   
break;
case 55:  return 74;   
break;
case 56:  return 73;   
break;
case 57:return 38;
break;
case 58:return 37;
break;
case 59:return 58;
break;
case 60:return 59;
break;
case 61:return 65;
break;
case 62:return 20;
break;
case 63:return 53;
break;
case 64:return 'tk_caracter';
break;
case 65:return 29;
break;
case 66: /*se ignoran*/ 
break;
case 67:return 5;
break;
case 68: 
                        console.log('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        
                    
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?::)/i,/^(?:;)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\\)/i,/^(?:\^)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:[0-9]+\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:default\b)/i,/^(?:static\b)/i,/^(?:BREAK\b)/i,/^(?:CONTINUE\b)/i,/^(?:RETURN\b)/i,/^(?:MAIN\b)/i,/^(?:ARGS\b)/i,/^(?:PUBLIC\b)/i,/^(?:PRIVATE\b)/i,/^(?:SWITCH\b)/i,/^(?:CASE\b)/i,/^(?:VOID\b)/i,/^(?:SYSTEM\b)/i,/^(?:OUT\b)/i,/^(?:PRINTLN\b)/i,/^(?:PRINT\b)/i,/^(?:INTERFACE\b)/i,/^(?:class\b)/i,/^(?:FOR\b)/i,/^(?:IF\b)/i,/^(?:ELSE\b)/i,/^(?:WHILE\b)/i,/^(?:DO\b)/i,/^(?:DOUBLE\b)/i,/^(?:INT\b)/i,/^(?:BOOLEAN\b)/i,/^(?:FLOAT\b)/i,/^(?:STRING\b)/i,/^(?:CHAR\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:\))/i,/^(?:\()/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[ \t\r\n\f]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grama;
exports.Parser = Grama.Parser;
exports.parse = function () { return Grama.parse.apply(Grama, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}