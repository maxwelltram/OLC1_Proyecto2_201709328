/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grama = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,17],$V2=[1,24],$V3=[1,25],$V4=[1,26],$V5=[1,27],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,16],$Vc=[1,28],$Vd=[1,29],$Ve=[2,5,19,22,23,24,25,26,31,32,33,34,35,53,54,59],$Vf=[1,45],$Vg=[46,55,56],$Vh=[1,55],$Vi=[1,53],$Vj=[1,54],$Vk=[1,56],$Vl=[1,57],$Vm=[1,58],$Vn=[1,69],$Vo=[1,70],$Vp=[1,71],$Vq=[1,72],$Vr=[1,73],$Vs=[1,74],$Vt=[1,75],$Vu=[1,76],$Vv=[1,77],$Vw=[1,78],$Vx=[1,79],$Vy=[1,80],$Vz=[1,81],$VA=[1,82],$VB=[1,83],$VC=[1,84],$VD=[8,19,28,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],$VE=[8,19,28,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],$VF=[8,19,28,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$VG=[8,19,28,64,65,66,67,68,69,70,75,76],$VH=[8,19,28,64,65,66,67,68,69,70,71,72,73,74,75,76];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"tk_PuntoYComa":8,"IMPRIMIR":9,"ASIGNACION":10,"IF":11,"WHILE":12,"FOR":13,"DO":14,"COMENTARIO":15,"CLASE":16,"LLAMAMETODO":17,"TIPO":18,"tk_identificador":19,"tk_igual":20,"EXPRESION":21,"tk_int":22,"tk_double":23,"tk_boolean":24,"tk_char":25,"tk_if":26,"tk_ParentesisA":27,"tk_ParentesisC":28,"SENTENCIAS":29,"tk_else":30,"tk_while":31,"tk_for":32,"tk_do":33,"Tk_comentario":34,"tk_system":35,"tk_Punto":36,"tk_out":37,"IMPRIMIRPRIMA":38,"CONTENIDO":39,"tk_print":40,"tk_println":41,"tk_cadena":42,"ACCESO":43,"CLAIN":44,"tk_id":45,"tk_static":46,"tk_void":47,"tk_main":48,"tk_string":49,"tk_CorcheteA":50,"tk_CorcheteC":51,"tk_args":52,"tk_public":53,"tk_private":54,"tk_class":55,"tk_interface":56,"METODO":57,"tk_LlaveA":58,"tk_LlaveC":59,"tk_diagonal":60,"tk_multiplicacion":61,"tk_menos":62,"tk_mas":63,"tk_entero":64,"tk_decimal":65,"tk_float":66,"tk_false":67,"tk_true":68,"tk_dobleIgual":69,"tk_diferenteDe":70,"tk_menorQue":71,"tk_mayorQue":72,"tk_menorOigual":73,"tk_mayorOigual":74,"tk_And":75,"tk_Or":76,"tk_Potencia":77,"tk_coma":78,"tk_sustraccion":79,"tk_adicion":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"tk_PuntoYComa",19:"tk_identificador",20:"tk_igual",22:"tk_int",23:"tk_double",24:"tk_boolean",25:"tk_char",26:"tk_if",27:"tk_ParentesisA",28:"tk_ParentesisC",30:"tk_else",31:"tk_while",32:"tk_for",33:"tk_do",34:"Tk_comentario",35:"tk_system",36:"tk_Punto",37:"tk_out",40:"tk_print",41:"tk_println",42:"tk_cadena",45:"tk_id",46:"tk_static",47:"tk_void",48:"tk_main",49:"tk_string",50:"tk_CorcheteA",51:"tk_CorcheteC",52:"tk_args",53:"tk_public",54:"tk_private",55:"tk_class",56:"tk_interface",58:"tk_LlaveA",59:"tk_LlaveC",60:"tk_diagonal",61:"tk_multiplicacion",62:"tk_menos",63:"tk_mas",64:"tk_entero",65:"tk_decimal",66:"tk_float",67:"tk_false",68:"tk_true",69:"tk_dobleIgual",70:"tk_diferenteDe",71:"tk_menorQue",72:"tk_mayorQue",73:"tk_menorOigual",74:"tk_mayorOigual",75:"tk_And",76:"tk_Or",77:"tk_Potencia",78:"tk_coma",79:"tk_sustraccion",80:"tk_adicion"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[7,4],[18,1],[18,1],[18,1],[18,1],[10,3],[11,5],[11,7],[12,5],[13,7],[14,3],[15,1],[9,6],[38,1],[38,1],[17,4],[39,3],[16,4],[16,11],[43,1],[43,1],[44,1],[44,1],[57,7],[29,3],[21,3],[21,3],[21,3],[21,3],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 14:
console.log('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:15,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,43:23,53:$Vc,54:$Vd},{1:[3]},{2:$V0,5:[1,30],6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:15,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,43:23,53:$Vc,54:$Vd},o($Ve,[2,3]),{8:[1,32]},{8:[1,33]},{8:[1,34]},o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),{8:[1,35]},o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),{8:[1,36]},{19:[1,37]},{36:[1,38]},{20:[1,39],27:[1,40]},{27:[1,41]},{27:[1,42]},{27:[1,43]},{29:44,58:$Vf},o($Ve,[2,26]),{44:46,46:[1,47],55:[1,48],56:[1,49]},{19:[2,16]},{19:[2,17]},{19:[2,18]},{19:[2,19]},o($Vg,[2,34]),o($Vg,[2,35]),{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,10]),o($Ve,[2,14]),{20:[1,50]},{37:[1,51]},{19:$Vh,21:52,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{19:$Vh,21:59,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{19:$Vh,21:60,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{19:$Vh,21:61,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{7:62,18:15,22:$V2,23:$V3,24:$V4,25:$V5},{12:63,31:$V7},{2:$V0,4:64,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:15,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,43:23,53:$Vc,54:$Vd},{45:[1,65]},{47:[1,66]},{45:[2,36]},{45:[2,37]},{19:$Vh,21:67,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{36:[1,68]},{8:[2,20],60:$Vn,61:$Vo,62:$Vp,63:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},o($VD,[2,44]),o($VD,[2,45]),o($VD,[2,46]),o($VD,[2,47]),o($VD,[2,48]),o($VD,[2,49]),{28:[1,85],60:$Vn,61:$Vo,62:$Vp,63:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{28:[1,86],60:$Vn,61:$Vo,62:$Vp,63:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{28:[1,87],60:$Vn,61:$Vo,62:$Vp,63:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{19:$Vh,21:88,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{8:[2,25]},{2:$V0,6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:15,19:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,31:$V7,32:$V8,33:$V9,34:$Va,35:$Vb,43:23,53:$Vc,54:$Vd,59:[1,89]},{29:90,58:$Vf},{48:[1,91]},o([8,19,64,65,66,67,68],[2,15],{60:$Vn,61:$Vo,62:$Vp,63:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC}),{38:92,40:[1,93],41:[1,94]},{19:$Vh,21:95,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{19:$Vh,21:96,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{19:$Vh,21:97,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{19:$Vh,21:98,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{19:$Vh,21:99,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{19:$Vh,21:100,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{19:$Vh,21:101,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{19:$Vh,21:102,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{19:$Vh,21:103,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{19:$Vh,21:104,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{19:$Vh,21:105,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{19:$Vh,21:106,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{19:$Vh,21:107,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{19:$Vh,21:108,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{19:$Vh,21:109,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},{19:$Vh,21:110,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm},o($Ve,[2,30]),{29:111,58:$Vf},{29:112,58:$Vf},{19:$Vh,21:113,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},o([2,5,8,19,22,23,24,25,26,30,31,32,33,34,35,53,54,59],[2,39]),o($Ve,[2,32]),{27:[1,114]},{27:[1,116],39:115},{27:[2,28]},{27:[2,29]},o($VE,[2,40],{62:$Vp}),o($VE,[2,41],{62:$Vp}),o($VE,[2,42],{62:$Vp}),o($VF,[2,43],{60:$Vn,61:$Vo,62:$Vp,77:$Vz,78:$VA,79:$VB,80:$VC}),o($VG,[2,50],{60:$Vn,61:$Vo,62:$Vp,63:$Vq,71:$Vt,72:$Vu,73:$Vv,74:$Vw,77:$Vz,78:$VA,79:$VB,80:$VC}),o($VG,[2,51],{60:$Vn,61:$Vo,62:$Vp,63:$Vq,71:$Vt,72:$Vu,73:$Vv,74:$Vw,77:$Vz,78:$VA,79:$VB,80:$VC}),o($VH,[2,52],{60:$Vn,61:$Vo,62:$Vp,63:$Vq,77:$Vz,78:$VA,79:$VB,80:$VC}),o($VH,[2,53],{60:$Vn,61:$Vo,62:$Vp,63:$Vq,77:$Vz,78:$VA,79:$VB,80:$VC}),o($VH,[2,54],{60:$Vn,61:$Vo,62:$Vp,63:$Vq,77:$Vz,78:$VA,79:$VB,80:$VC}),o($VH,[2,55],{60:$Vn,61:$Vo,62:$Vp,63:$Vq,77:$Vz,78:$VA,79:$VB,80:$VC}),o([8,19,28,64,65,66,67,68,75,76],[2,56],{60:$Vn,61:$Vo,62:$Vp,63:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,77:$Vz,78:$VA,79:$VB,80:$VC}),o([8,19,28,64,65,66,67,68,76],[2,57],{60:$Vn,61:$Vo,62:$Vp,63:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,77:$Vz,78:$VA,79:$VB,80:$VC}),o($VF,[2,58],{60:$Vn,61:$Vo,62:$Vp,77:$Vz,78:$VA,79:$VB,80:$VC}),o([8,19,28,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],[2,59],{60:$Vn,61:$Vo,62:$Vp}),o($VF,[2,60],{60:$Vn,61:$Vo,62:$Vp,77:$Vz,78:$VA,79:$VB,80:$VC}),o($VF,[2,61],{60:$Vn,61:$Vo,62:$Vp,77:$Vz,78:$VA,79:$VB,80:$VC}),o($Ve,[2,21],{30:[1,117]}),o([2,5,8,19,22,23,24,25,26,31,32,33,34,35,53,54,59],[2,23]),{28:[1,118],60:$Vn,61:$Vo,62:$Vp,63:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC},{49:[1,119]},{8:[2,27]},{42:[1,120]},{29:121,58:$Vf},{29:122,58:$Vf},{50:[1,123]},{28:[1,124]},o($Ve,[2,22]),o($Ve,[2,24]),{51:[1,125]},{8:[2,31]},{52:[1,126]},{28:[1,127]},{29:128,58:$Vf},o($Ve,[2,33])],
defaultActions: {24:[2,16],25:[2,17],26:[2,18],27:[2,19],30:[2,1],48:[2,36],49:[2,37],63:[2,25],93:[2,28],94:[2,29],115:[2,27],124:[2,31]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 34; 
break;
case 1:return 34; 
break;
case 2:return 80; 
break;
case 3:return 79; 
break;
case 4:return 63; 
break;
case 5:return 62; 
break;
case 6:return 61; 
break;
case 7:return 60; 
break;
case 8:return 'tk_dosPuntos'; 
break;
case 9:return 8; 
break;
case 10:return 36; 
break;
case 11:return 78; 
break;
case 12:return 74; 
break;
case 13:return 73; 
break;
case 14:return 69; 
break;
case 15:return 20; 
break;
case 16:return 70; 
break;
case 17:return 71; 
break;
case 18:return 72; 
break;
case 19:return 'tk_diagonalInvertida'; 
break;
case 20:return 77;
break;
case 21:return 75;
break;
case 22:return 76;
break;
case 23:return 'tk_not';
break;
case 24:  return 64;  
break;
case 25:  return 65; 
break;
case 26:  return 'tk_default'; 
break;
case 27:  return 46; 
break;
case 28:  return 'tk_break';   
break;
case 29:  return 'tk_continue';   
break;
case 30:  return 'tk_return';   
break;
case 31:  return 48;   
break;
case 32:  return 52;   
break;
case 33:  return 53;   
break;
case 34:  return 54;   
break;
case 35: return 'tk_switch';    
break;
case 36:return 'tk_case';     
break;
case 37:  return 47;   
break;
case 38:  return 35;   
break;
case 39:  return 37;   
break;
case 40:  return 41;   
break;
case 41:  return 40;   
break;
case 42:  return 56;   
break;
case 43:  return 55;   
break;
case 44:  return 32;   
break;
case 45:  return 26;   
break;
case 46:  return 30;   
break;
case 47:  return 31;   
break;
case 48:  return 33;   
break;
case 49:return 23;
break;
case 50:  return 22;   
break;
case 51:  return 24;   
break;
case 52:  return 66;   
break;
case 53:  return 49;   
break;
case 54:  return 25;   
break;
case 55:  return 68;   
break;
case 56:  return 67;   
break;
case 57:return 28;
break;
case 58:return 27;
break;
case 59:return 50;
break;
case 60:return 51;
break;
case 61:return 58;
break;
case 62:return 59;
break;
case 63:return 42;
break;
case 64:return 'tk_caracter';
break;
case 65:return 19;
break;
case 66: /*se ignoran*/ 
break;
case 67:return 5;
break;
case 68: 
                        console.log('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        
                    
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?::)/i,/^(?:;)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\\)/i,/^(?:\^)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:[0-9]+\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:default\b)/i,/^(?:static\b)/i,/^(?:BREAK\b)/i,/^(?:CONTINUE\b)/i,/^(?:RETURN\b)/i,/^(?:MAIN\b)/i,/^(?:ARGS\b)/i,/^(?:PUBLIC\b)/i,/^(?:PRIVATE\b)/i,/^(?:SWITCH\b)/i,/^(?:CASE\b)/i,/^(?:VOID\b)/i,/^(?:SYSTEM\b)/i,/^(?:OUT\b)/i,/^(?:PRINTLN\b)/i,/^(?:PRINT\b)/i,/^(?:INTERFACE\b)/i,/^(?:class\b)/i,/^(?:FOR\b)/i,/^(?:IF\b)/i,/^(?:ELSE\b)/i,/^(?:WHILE\b)/i,/^(?:DO\b)/i,/^(?:DOUBLE\b)/i,/^(?:INT\b)/i,/^(?:BOOLEAN\b)/i,/^(?:FLOAT\b)/i,/^(?:STRING\b)/i,/^(?:CHAR\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:\))/i,/^(?:\()/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[ \t\r\n\f]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grama;
exports.Parser = Grama.Parser;
exports.parse = function () { return Grama.parse.apply(Grama, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}